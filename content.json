{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"Whether a binary tree is balanced or not.md","slug":"Whether-a-binary-tree-is-balanced-or-not-md","date":"2019-03-30T18:40:55.000Z","updated":"2019-03-30T18:49:30.559Z","comments":true,"path":"2019/03/31/Whether-a-binary-tree-is-balanced-or-not-md/","link":"","permalink":"http://yoursite.com/2019/03/31/Whether-a-binary-tree-is-balanced-or-not-md/","excerpt":"","text":"Whether a binary tree is balanced or notThe definition of a balanced binary tree is : left sub-tree is balanced &amp;&amp; right sub-tree is balanced &amp;&amp; abs(height(left) - height(right)) &lt;= 1 ‘’’ C++/ CPP program to check ifa tree is height-balanced or not / #include &lt;bits/stdc++.h&gt;using namespace std; / A binary tree node has data,pointer to left child anda pointer to right child /class node{ public: int data; node left; node right;}; / Returns the height of a binary tree /int height(node* node); / Returns true if binary treewith root as root is height-balanced /bool isBalanced(node root){ int lh; / for height of left subtree / int rh; / for height of right subtree */ / If tree is empty then return true / if(root == NULL) return 1; / Get the height of left and right sub trees / lh = height(root-&gt;left); rh = height(root-&gt;right); if( abs(lh-rh) &lt;= 1 &amp;&amp; isBalanced(root-&gt;left) &amp;&amp; isBalanced(root-&gt;right)) return 1; / If we reach here then tree is not height-balanced / return 0;} / UTILITY FUNCTIONS TO TEST isBalanced() FUNCTION / / returns maximum of two integers /int max(int a, int b){ return (a &gt;= b)? a: b;} / The function Compute the “height”of a tree. Height is the number ofnodes along the longest path fromthe root node down to the farthest leaf node./int height(node node){ / base case tree is empty */ if(node == NULL) return 0; / If tree is not empty then height = 1 + max of left height and right heights / return 1 + max(height(node-&gt;left), height(node-&gt;right));} / Helper function that allocatesa new node with the given dataand NULL left and right pointers. /node newNode(int data){ node Node = new node(); Node-&gt;data = data; Node-&gt;left = NULL; Node-&gt;right = NULL; return(Node);} // Driver codeint main(){ node *root = newNode(1); root-&gt;left = newNode(2); root-&gt;right = newNode(3); root-&gt;left-&gt;left = newNode(4); root-&gt;left-&gt;right = newNode(5); root-&gt;left-&gt;left-&gt;left = newNode(8); if(isBalanced(root)) cout &lt;&lt; “Tree is balanced”; else cout &lt;&lt; “Tree is not balanced”; return 0;} // This code is contributed by rathbhupendra‘’’","categories":[],"tags":[]},{"title":"How to publish my writing.md","slug":"How-to-publish-my-writing-md","date":"2019-03-30T18:32:34.000Z","updated":"2019-03-30T18:36:30.186Z","comments":true,"path":"2019/03/31/How-to-publish-my-writing-md/","link":"","permalink":"http://yoursite.com/2019/03/31/How-to-publish-my-writing-md/","excerpt":"","text":"How to Publish My Writing Next Time","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-03-30T18:11:27.656Z","updated":"2019-03-30T18:11:27.656Z","comments":true,"path":"2019/03/31/hello-world/","link":"","permalink":"http://yoursite.com/2019/03/31/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}
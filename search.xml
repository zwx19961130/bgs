<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Whether a binary tree is balanced or not.md</title>
      <link href="/2019/03/31/Whether-a-binary-tree-is-balanced-or-not-md/"/>
      <url>/2019/03/31/Whether-a-binary-tree-is-balanced-or-not-md/</url>
      
        <content type="html"><![CDATA[<h1 id="Whether-a-binary-tree-is-balanced-or-not"><a href="#Whether-a-binary-tree-is-balanced-or-not" class="headerlink" title="Whether a binary tree is balanced or not"></a>Whether a binary tree is balanced or not</h1><p>The definition of a balanced binary tree is :</p><p>left sub-tree is balanced &amp;&amp; right sub-tree is balanced &amp;&amp; abs(height(left) - height(right))  &lt;= 1</p><pre><code>/* CPP program to check if a tree is height-balanced or not */#include &lt;bits/stdc++.h&gt; using namespace std; /* A binary tree node has data, pointer to left child and a pointer to right child */class node {   public:   int data;   node* left;   node* right; }; /* Returns the height of a binary tree */int height(node* node); /* Returns true if binary tree with root as root is height-balanced */bool isBalanced(node *root) {   int lh; /* for height of left subtree */  int rh; /* for height of right subtree */  /* If tree is empty then return true */  if(root == NULL)     return 1;   /* Get the height of left and right sub trees */  lh = height(root-&gt;left);   rh = height(root-&gt;right);   if( abs(lh-rh) &lt;= 1 &amp;&amp;     isBalanced(root-&gt;left) &amp;&amp;     isBalanced(root-&gt;right))     return 1;   /* If we reach here then   tree is not height-balanced */  return 0; } /* UTILITY FUNCTIONS TO TEST isBalanced() FUNCTION *//* returns maximum of two integers */int max(int a, int b) {   return (a &gt;= b)? a: b; } /* The function Compute the &quot;height&quot; of a tree. Height is the number of nodes along the longest path from the root node down to the farthest leaf node.*/int height(node* node) {   /* base case tree is empty */  if(node == NULL)     return 0;   /* If tree is not empty then   height = 1 + max of left     height and right heights */  return 1 + max(height(node-&gt;left),         height(node-&gt;right)); } /* Helper function that allocates a new node with the given data and NULL left and right pointers. */node* newNode(int data) {   node* Node = new node();   Node-&gt;data = data;   Node-&gt;left = NULL;   Node-&gt;right = NULL;   return(Node); } // Driver code int main() {   node *root = newNode(1);   root-&gt;left = newNode(2);   root-&gt;right = newNode(3);   root-&gt;left-&gt;left = newNode(4);   root-&gt;left-&gt;right = newNode(5);   root-&gt;left-&gt;left-&gt;left = newNode(8);   if(isBalanced(root))   cout &lt;&lt; &quot;Tree is balanced&quot;;   else  cout &lt;&lt; &quot;Tree is not balanced&quot;;   return 0; } // This code is contributed by rathbhupendra </code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to publish my writing.md</title>
      <link href="/2019/03/31/How-to-publish-my-writing-md/"/>
      <url>/2019/03/31/How-to-publish-my-writing-md/</url>
      
        <content type="html"><![CDATA[<h1 id="How-to-Publish-My-Writing-Next-Time"><a href="#How-to-Publish-My-Writing-Next-Time" class="headerlink" title="How to Publish My Writing Next Time"></a>How to Publish My Writing Next Time</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/03/31/hello-world/"/>
      <url>/2019/03/31/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

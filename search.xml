<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Whether a binary tree is balanced or not.md</title>
      <link href="/2019/03/31/Whether-a-binary-tree-is-balanced-or-not-md/"/>
      <url>/2019/03/31/Whether-a-binary-tree-is-balanced-or-not-md/</url>
      
        <content type="html"><![CDATA[<h1 id="Whether-a-binary-tree-is-balanced-or-not"><a href="#Whether-a-binary-tree-is-balanced-or-not" class="headerlink" title="Whether a binary tree is balanced or not"></a>Whether a binary tree is balanced or not</h1><p>The definition of a balanced binary tree is :</p><p>left sub-tree is balanced &amp;&amp; right sub-tree is balanced &amp;&amp; abs(height(left) - height(right))  &lt;= 1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* CPP program to check if </span></span><br><span class="line"><span class="comment">a tree is height-balanced or not */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* A binary tree node has data, </span></span><br><span class="line"><span class="comment">pointer to left child and </span></span><br><span class="line"><span class="comment">a pointer to right child */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">node</span> </span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line">  <span class="keyword">public</span>: </span><br><span class="line">  <span class="keyword">int</span> data; </span><br><span class="line">  node* left; </span><br><span class="line">  node* right; </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">/* Returns the height of a binary tree */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(node* node)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">/* Returns true if binary tree </span></span><br><span class="line"><span class="comment">with root as root is height-balanced */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isBalanced</span><span class="params">(node *root)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">  <span class="keyword">int</span> lh; <span class="comment">/* for height of left subtree */</span></span><br><span class="line">  <span class="keyword">int</span> rh; <span class="comment">/* for height of right subtree */</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* If tree is empty then return true */</span></span><br><span class="line">  <span class="keyword">if</span>(root == <span class="literal">NULL</span>) </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Get the height of left and right sub trees */</span></span><br><span class="line">  lh = height(root-&gt;left); </span><br><span class="line">  rh = height(root-&gt;right); </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>( <span class="built_in">abs</span>(lh-rh) &lt;= <span class="number">1</span> &amp;&amp; </span><br><span class="line">    isBalanced(root-&gt;left) &amp;&amp; </span><br><span class="line">    isBalanced(root-&gt;right)) </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* If we reach here then </span></span><br><span class="line"><span class="comment">  tree is not height-balanced */</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/* UTILITY FUNCTIONS TO TEST isBalanced() FUNCTION */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* returns maximum of two integers */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">  <span class="keyword">return</span> (a &gt;= b)? a: b; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/* The function Compute the "height" </span></span><br><span class="line"><span class="comment">of a tree. Height is the number of </span></span><br><span class="line"><span class="comment">nodes along the longest path from </span></span><br><span class="line"><span class="comment">the root node down to the farthest leaf node.*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">height</span><span class="params">(node* node)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">  <span class="comment">/* base case tree is empty */</span></span><br><span class="line">  <span class="keyword">if</span>(node == <span class="literal">NULL</span>) </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* If tree is not empty then </span></span><br><span class="line"><span class="comment">  height = 1 + max of left </span></span><br><span class="line"><span class="comment">    height and right heights */</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span> + max(height(node-&gt;left), </span><br><span class="line">        height(node-&gt;right)); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/* Helper function that allocates </span></span><br><span class="line"><span class="comment">a new node with the given data </span></span><br><span class="line"><span class="comment">and NULL left and right pointers. */</span></span><br><span class="line"><span class="function">node* <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> data)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">  node* Node = <span class="keyword">new</span> node(); </span><br><span class="line">  Node-&gt;data = data; </span><br><span class="line">  Node-&gt;left = <span class="literal">NULL</span>; </span><br><span class="line">  Node-&gt;right = <span class="literal">NULL</span>; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span>(Node); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Driver code </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">  node *root = newNode(<span class="number">1</span>); </span><br><span class="line">  root-&gt;left = newNode(<span class="number">2</span>); </span><br><span class="line">  root-&gt;right = newNode(<span class="number">3</span>); </span><br><span class="line">  root-&gt;left-&gt;left = newNode(<span class="number">4</span>); </span><br><span class="line">  root-&gt;left-&gt;right = newNode(<span class="number">5</span>); </span><br><span class="line">  root-&gt;left-&gt;left-&gt;left = newNode(<span class="number">8</span>); </span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(isBalanced(root)) </span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"Tree is balanced"</span>; </span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"Tree is not balanced"</span>; </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// This code is contributed by rathbhupendra</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to publish my writing.md</title>
      <link href="/2019/03/31/How-to-publish-my-writing-md/"/>
      <url>/2019/03/31/How-to-publish-my-writing-md/</url>
      
        <content type="html"><![CDATA[<h1 id="How-to-Publish-My-Writing-Next-Time"><a href="#How-to-Publish-My-Writing-Next-Time" class="headerlink" title="How to Publish My Writing Next Time"></a>How to Publish My Writing Next Time</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/03/31/hello-world/"/>
      <url>/2019/03/31/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
